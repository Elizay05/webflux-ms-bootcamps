package com.example.webflux_ms_bootcamps.infrastructure.input.router;

import com.example.webflux_ms_bootcamps.application.dto.request.BootcampRequest;
import com.example.webflux_ms_bootcamps.application.dto.response.BootcampPageResponse;
import com.example.webflux_ms_bootcamps.infrastructure.input.handler.BootcampHandler;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springdoc.core.annotations.RouterOperation;
import org.springdoc.core.annotations.RouterOperations;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.reactive.function.server.RouterFunction;
import org.springframework.web.reactive.function.server.RouterFunctions;
import org.springframework.web.reactive.function.server.ServerResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.parameters.RequestBody;
import io.swagger.v3.oas.annotations.responses.ApiResponse;

import static com.example.webflux_ms_bootcamps.infrastructure.input.util.constants.ConstantsInput.*;

@Configuration
public class BootcampRouter {

    @Bean
    @RouterOperations({
            @RouterOperation(
                    path = PATH_BOOTCAMPS,
                    beanClass = BootcampHandler.class,
                    beanMethod = "createBootcamp",
                    method = RequestMethod.POST,
                    operation = @Operation(
                            operationId = "createBootcamp",
                            summary = "Crear un bootcamp",
                            description = "Registra un nuevo bootcamp en el sistema con nombre, descripción y hasta 4 capacidades",
                            requestBody = @RequestBody(
                                    content = @Content(
                                            mediaType = MediaType.APPLICATION_JSON_VALUE,
                                            schema = @Schema(implementation = BootcampRequest.class),
                                            examples = @ExampleObject(
                                                    name = "Ejemplo de creación de bootcamp",
                                                    value = EXAMPLE_BOOTCAMP_CREATE
                                            )
                                    )
                            ),
                            responses = {
                                    @ApiResponse(responseCode = "201",
                                            description = RESP_BOOTCAMP_CREATED
                                    ),
                                    @ApiResponse(responseCode = "400",
                                            description = RESP_ERROR_VALIDATION,
                                            content = @Content(
                                                    mediaType = MediaType.APPLICATION_JSON_VALUE,
                                                    examples = @ExampleObject(
                                                            value = EXAMPLE_ERROR_VALIDATION
                                                    )
                                            )
                                    ),
                                    @ApiResponse(responseCode = "409",
                                            description = RESP_ERROR_EXISTS,
                                            content = @Content(
                                                    mediaType = MediaType.APPLICATION_JSON_VALUE,
                                                    examples = @ExampleObject(
                                                            value = EXAMPLE_ERROR_EXISTS
                                                    )
                                            )
                                    ),
                                    @ApiResponse(responseCode = "500",
                                            description = RESP_ERROR_SERVER
                                    )
                            }
                    )
            ),
            @RouterOperation(
                    path = PATH_BOOTCAMPS,
                    beanClass = BootcampHandler.class,
                    beanMethod = "getBootcamps",
                    method = RequestMethod.GET,
                    operation = @Operation(
                            operationId = "getBootcamps",
                            summary = "Obtener bootcamps",
                            description = "Lista todos los bootcamps disponibles con paginación y ordenamiento",
                            parameters = {
                                    @Parameter(name = PARAM_PAGE, description = DESC_PAGE, example = "0", in = ParameterIn.QUERY),
                                    @Parameter(name = PARAM_SIZE, description = DESC_SIZE, example = "10", in = ParameterIn.QUERY),
                                    @Parameter(name = PARAM_ASC, description = DESC_ASC, example = "true", in = ParameterIn.QUERY),
                                    @Parameter(name = PARAM_SORT_BY, description = DESC_SORT_BY, example = "name", in = ParameterIn.QUERY)
                            },
                            responses = {
                                    @ApiResponse(responseCode = "200",
                                            description = RESP_BOOTCAMP_LIST,
                                            content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE,
                                                    schema = @Schema(implementation = BootcampPageResponse.class)
                                            )
                                    ),
                                    @ApiResponse(responseCode = "400",
                                            description = RESP_BAD_REQUEST,
                                            content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE)
                                    )
                            }
                    )
            )
    })
    public RouterFunction<ServerResponse> bootcampRoutes(BootcampHandler handler) {
        return RouterFunctions.route()
                .POST(PATH_BOOTCAMPS, handler::createBootcamp)
                .GET(PATH_BOOTCAMPS, handler::getBootcamps)
                .build();
    }
}